temp=raw
temp$predictor=temp[feature][,1]
## do nothing
agg=agg
pmean=pmean
temp=temp
## get yrange
yrange=range(agg$yhat,pmean$yhat,na.rm=T)
## fix temp to yrange
temp$yhat=ifelse(temp$hemo==1,max(yrange),min(yrange))
## ggplot with rug
set.seed(1)
ggplot(agg,aes(predictor,yhat,group=seed))+
## add individual BRTs
geom_jitter(size=1,alpha=0.25,colour="grey",width=0.1)+
## add mean
geom_point(data=pmean,size=2,inherit.aes=F,shape=15,
aes(predictor,yhat))+
## add rug
geom_rug(data=temp,inherit.aes=F,
aes(predictor,yhat),
sides="b",position="jitter",
colour="grey",alpha=0.25,
na.rm=T)+
## theme
theme_bw()+
theme(axis.text=element_text(size=6),
axis.title=element_text(size=7))+
theme(axis.title.x=element_text(margin=margin(t=5,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=5,b=0,l=0)))+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
labs(x=feature,y="marginal effect")+
scale_y_continuous(limits=c(yrange[1]-0.01,yrange[2]+0.01),
labels=scales::number_format(accuracy=0.01))
}
}
## visualize
pdp_plot(brts,vdata$var[1])
pdp_plot(brts,vdata$var[2])
pdp_plot(brts,vdata$var[3])
pdp_plot(brts,vdata$var[4])
pdp_plot(brts,vdata$var[5])
pdp_plot(brts,vdata$var[6])
pdp_plot(brts,vdata$var[7])
pdp_plot(brts,vdata$var[8])
pdp_plot(brts,vdata$var[9])
pdp_plot(brts,vdata$var[10])
pdp_plot(brts,vdata$var[11])
pdp_plot(brts,vdata$var[12])
pdp_plot(brts,vdata$var[13])
pdp_plot(brts,vdata$var[14])
pdp_plot(brts,vdata$var[15])
## average predictions
apreds=lapply(brts,function(x) x$predict)
apreds=do.call(rbind,apreds)
## aggregate
apreds=data.frame(aggregate(pred~tip,data=apreds,mean))
## get basic info
brts[[1]]$predict
## get basic info
dat=brts[[1]]$predict[c("tip","sampled","hemo")]
## merge
apreds=merge(apreds,dat,by="tip")
View(apreds)
hist(apreds$pred)
## predicting bat hosts of hemoplasmas
## clean environment & plots
rm(list=ls())
graphics.off()
## library
library(plyr)
library(ggplot2)
library(car)
library(visreg)
library(ape)
library(phytools)
library(ggtree)
library(phylofactor)
library(readxl)
library(caper)
library(gbm)
library(fastDummies)
library(rsample)
library(ROCR)
library(sciplot)
## load cleaned data
setwd("~/Dropbox (Personal)/papers review hemoplasmas")
data=read_excel("Supp File 1 review hemoplasmas.xlsx",sheet=1)
## bats only
data=data[data$order=="Chiroptera",]
## check eidolon
data[data$host_species=="Eidolon spp.","country"]
## fix Eidolon
data$host_species=ifelse(data$host_species=="Eidolon spp.","Eidolon helvum",data$host_species)
## simple
data=data[c("host_species","sample_size","host_positive")]
## split
data$scale=sapply(strsplit(data$host_species," "),function(x) x[2])
data$scale=ifelse(data$scale%in%c("spp.","sp."),"genus","species")
## remove genus
data=data[!data$scale=="genus",]
data$scale=NULL
## aggregate
data=aggregate(host_positive~host_species,data=data,sum)
data$positive=ifelse(data$host_positive>0,1,0)
data$host_positive=NULL
## fix
data$tip=gsub(" ","_",data$host_species)
## load Upham phylogeny
setwd("~/Desktop/BeckerLabOU/phylos")
tree=read.nexus('MamPhy_fullPosterior_BDvr_Completed_5911sp_topoCons_NDexp_MCC_v2_target.tre')
## load in taxonomy
taxa=read.csv('taxonomy_mamPhy_5911species.csv',header=T)
taxa=taxa[taxa$ord=="CHIROPTERA",]
## tip
taxa$tip=taxa$Species_Name
taxa=taxa[c("tip","clade","fam","gen","MSW3_sciName_matched")]
## are all data in taxa?
setdiff(data$tip,taxa$tip)
## fix data
data$tip=revalue(data$tip,
c("Artibeus_cinereus"="Dermanura_cinereus",
"Artibeus_watsoni"="Dermanura_watsoni",
"Eidolon_helvum_helvum"="Eidolon_helvum",
"Artibeus_intermedius"="Artibeus_lituratus",
"Eumops_auripendulos"="Eumops_auripendulus",
"Eumops_nanus"="Eumops_bonariensis",
"Gardnerycteris_keenani"="Mimon_crenulatum",
"Hypsugo_savii"="Pipistrellus_savii",
"Miniopterus_orianae_bassanii"="Miniopterus_schreibersii",
"Pteronotus_fulvus"="Pteronotus_davyi",
"Pteronotus_mesoamericanus"="Pteronotus_parnellii",
"Tadarida_nigeriae"="Chaerephon_nigeriae",
"Uroderma_convexum"="Uroderma_bilobatum"))
## are all data in taxa?
setdiff(data$tip,taxa$tip)
## reagg
data=aggregate(positive~tip,data=data,sum)
data$positive=ifelse(data$positive>0,1,0)
## merge
data=merge(data,taxa,by="tip",all=T)
## clean
data$MSW3_sciName_matched=NULL
data$clade=NULL
## subset to samples
set=data[!is.na(data$positive),]
fams=unique(set$fam)
## clean
rm(set)
## trim data to sampled families
data=data[data$fam%in%fams,]
## pseudoabsence
data$sampled=ifelse(!is.na(data$positive),1,0)
data$hemo=ifelse(is.na(data$positive),0,data$positive)
data$positive=NULL
## fix tree tip
tree$tip.label=sapply(strsplit(tree$tip.label,'_'),function(x) paste(x[1],x[2],sep='_'))
## drop tips
tree=keep.tip(tree,data$tip)
## label
data$merge=data$tip
data$label=data$tip
data$Species=data$tip
## clean
rm(taxa,fams)
## combine with trait data
setwd("~/Desktop/BeckerLabOU/traits")
traits=read.delim('PanTHERIA_1-0_WR05_Aug2008.txt',na.strings=c("-999","-999.00"))
## matching column
traits$tip=gsub(" ","_",traits$MSW05_Binomial)
## bats only
traits=traits[traits$MSW05_Order=="Chiroptera",]
## setdiff
setdiff(data$tip,traits$tip)
## fix later
## clean
traits$MSW05_Order=NULL
traits$MSW05_Genus=NULL
traits$MSW05_Family=NULL
traits$MSW05_Species=NULL
traits$MSW05_Binomial=NULL
## merge
data=merge(data,traits,by="tip",all.x=T)
rm(traits)
## match phylogeny order
data=data[match(tree$tip.label,data$merge),]
## merge data and tree with caper
cdata=comparative.data(phy=tree,data=data,names.col=merge,vcv=T,na.omit=F,warn.dropped=T)
rm(data,tree)
## factors
cdata$data$X6.2_TrophicLevel=factor(cdata$data$X6.2_TrophicLevel)
## set data
raw=cdata$data
raw$gen=as.character(raw$gen)
raw$fam=as.character(raw$fam)
## make binary columns for genus
dums=dummy_cols(raw["gen"])
## unique
dums=dums[!duplicated(dums$gen),]
## ensure all factor
for(i in 1:ncol(dums)){
## column as factor
dums[,i]=factor(dums[,i])
}
## merge
raw=merge(raw,dums,by="gen",all.x=T)
rm(dums)
## repeat for family
dums=dummy_cols(raw["fam"])
## unique
dums=dums[!duplicated(dums$fam),]
## ensure all factor
for(i in 1:ncol(dums)){
## column as factor
dums[,i]=factor(dums[,i])
}
## merge
raw=merge(raw,dums,by="fam",all.x=T)
rm(dums)
## mode function
mode.prop <- function(x) {
ux <- unique(x[is.na(x)==FALSE])
tab <- tabulate(match(na.omit(x), ux))
max(tab)/length(x[is.na(x)==FALSE])
}
## assess variation across columns
vars=data.frame(apply(raw,2,function(x) mode.prop(x)),
apply(raw,2,function(x) length(unique(x))))
## get names
vars$variables=rownames(vars)
names(vars)=c("var","uniq","column")
vars$var=round(vars$var,2)
## if homogenous (100%)
vars$keep=ifelse(vars$var<1,"keep","cut")
vars=vars[order(vars$keep),]
## trim
keeps=vars[-which(vars$keep=="cut"),]$column
## drop if no variation
raw=raw[keeps]
rm(keeps,vars)
## assess missing values
mval=data.frame(apply(raw,2,function(x) length(x[!is.na(x)])/nrow(raw)))
## get names
mval$variables=rownames(mval)
names(mval)=c("comp","column")
## if have at least 15% values, keep
mval$comp=round(mval$comp,2)
mval$keep=ifelse(mval$comp>=0.15,"keep","cut")
mval=mval[order(mval$keep),]
keeps=mval[-which(mval$keep=="cut"),]$column
## order
mval=mval[order(mval$comp),]
## drop if not well represented
raw=raw[keeps]
rm(mval,keeps)
raw$References=NULL
## set to trim
set=raw
## remove fam and gen
set$fam=NULL
set$gen=NULL
## drop unnecessary columns
set$sampled=NULL
set$label=NULL
set$Species=NULL
set$tip=NULL
## function to use different data partitions
brt_part=function(seed,response){
## make new data
ndata=set
## correct response
ndata$response=ndata[response][,1]
## remove raw
ndata$hemo=NULL
## fix cites if response
if(response=="cites"){
## plus 1 for 0
ndata$cites=ifelse(ndata$cites==0,1,ndata$cites)
}else{
ndata=ndata
}
## use rsample to split
set.seed(seed)
split=initial_split(ndata,prop=0.8,strata="response")
## test and train
dataTrain=training(split)
dataTest=testing(split)
## yTest and yTrain
yTrain=dataTrain$response
yTest=dataTest$response
## dist
dist=ifelse(response=="cites","poisson","bernoulli")
## n.trees
nt=ifelse(response=="cites",10000,5000)
## BRT
set.seed(1)
gbmOut=gbm(response ~ . ,data=dataTrain,
n.trees=nt,
distribution=dist,
shrinkage=0.001,
interaction.depth=3,
n.minobsinnode=4,
cv.folds=5,class.stratify.cv=TRUE,
bag.fraction=0.5,train.fraction=1,
n.cores=1,
verbose=F)
## performance
par(mfrow=c(1,1),mar=c(4,4,1,1))
best.iter=gbm.perf(gbmOut,method="cv")
## predict with test data
preds=predict(gbmOut,dataTest,n.trees=best.iter,type="response")
## AUC on train
auc_train=gbm.roc.area(yTrain,predict(gbmOut,dataTrain,n.trees=best.iter,type="response"))
## AUC on test
auc_test=gbm.roc.area(yTest,predict(gbmOut,dataTest,n.trees=best.iter,type="response"))
## skip if poisson
if(response=="cites"){
perf=NA
}else{
## inner loop if yTest is all 0
if(var(yTest)==0){
perf=NA
}else{
## ROC
pr=prediction(preds,dataTest$response)
perf=performance(pr,measure="tpr",x.measure="fpr")
perf=data.frame(perf@x.values,perf@y.values)
names(perf)=c("fpr","tpr")
## add seed
perf$seed=seed
}
}
## relative importance
bars=summary(gbmOut,n.trees=best.iter,plotit=F)
bars$rel.inf=round(bars$rel.inf,2)
## predict with cites
preds=predict(gbmOut,raw,n.trees=best.iter,type="response")
pred_data=raw[c("tip","sampled","hemo")]
pred_data$pred=preds
pred_data$type=response
## sort
pred_data=pred_data[order(pred_data$pred,decreasing=T),]
## print
print(paste("BRT ",seed," done; test AUC = ",auc_test,sep=""))
## save outputs
return(list(mod=gbmOut,
best=best.iter,
trainAUC=auc_train,
testAUC=auc_test,
roc=perf,
rinf=bars,
predict=pred_data,
traindata=dataTrain,
testdata=dataTest,
seed=seed))
}
## run function
smax=10
brts=lapply(1:smax,function(x) brt_part(seed=x,response="hemo"))
## mean AUC
mean(sapply(brts,function(x) x$testAUC))
se(sapply(brts,function(x) x$testAUC))
## relative importance
vinf=lapply(brts,function(x) x$rinf)
vinf=do.call(rbind,vinf)
## aggregate mean
vdata=data.frame(aggregate(rel.inf~var,data=vinf,mean),
aggregate(rel.inf~var,data=vinf,se)["rel.inf"])
names(vdata)=c("var","rel.inf","rse")
vdata=vdata[order(vdata$rel.inf,decreasing=T),]
rm(vinf)
## pdp
detach("package:purrr", unload=TRUE)
library(pdp)
## function for compiling across BRTs for a given predictor, all else equal
pdp_agg=function(mod,feature){
## just the plot function
pdep=plot(mod$mod,feature,
return.grid=T,
n.trees=mod$best,
plot=F,
continuous.resolution=200,
type="response")
## add seed
pdep$seed=unique(mod$roc$seed)
## save predictor
pdep$predictor=pdep[feature][,1]
## order
pdep=pdep[order(pdep$predictor),]
## get rank
pdep$rank=1:nrow(pdep)
## save yhat
pdep$yhat=pdep$y
## return
return(pdep)
}
## function to plot
pdp_plot=function(bmods,feature){
## pdp_agg
agg=do.call(rbind,lapply(bmods,function(x) pdp_agg(x,feature)))
## get class of the feature
cl=class(raw[feature][,1])
## if else based on type
if(cl%in%c("numeric","integer")){
## get element-wise means
x=with(agg,tapply(predictor,rank,mean))
y=with(agg,tapply(yhat,rank,mean))
## save as mean
pmean=data.frame(predictor=x,yhat=y)
## get yrange
yrange=range(agg$yhat,pmean$yhat,na.rm=T)
## get histogram
hi=hist(raw[feature][,1],breaks=30,plot=F)
hi=with(hi,data.frame(breaks[1:(length(breaks)-1)],counts))
names(hi)=c("mids","counts")
## ggplot it
ggplot(agg,aes(predictor,yhat,group=seed))+
## add histogram
geom_segment(data=hi,inherit.aes=F,
aes(x=mids,xend=mids,
y=yrange[1],yend=plotrix::rescale(counts,yrange)),
size=1,colour="grey",alpha=0.25)+
## add lines
geom_line(size=1,alpha=0.25,colour="grey")+
## add mean
geom_line(data=pmean,size=2,inherit.aes=F,
aes(predictor,yhat))+
## theme
theme_bw()+
theme(axis.text=element_text(size=6),
axis.title=element_text(size=7))+
theme(axis.title.x=element_text(margin=margin(t=5,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=5,b=0,l=0)))+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
labs(x=feature,y="marginal effect")+
scale_y_continuous(labels=scales::number_format(accuracy=0.01))
## end numeric
}else{ ## factor-based plot
## get element-wise means
y=with(agg,tapply(yhat,predictor,mean))
## save as mean
#pmean=data.frame(predictor=x,yhat=y)
pmean=data.frame(y)
names(pmean)="yhat"
pmean$predictor=rownames(pmean)
rownames(pmean)=NULL
## make temp data
temp=raw
temp$predictor=temp[feature][,1]
## do nothing
agg=agg
pmean=pmean
temp=temp
## get yrange
yrange=range(agg$yhat,pmean$yhat,na.rm=T)
## fix temp to yrange
temp$yhat=ifelse(temp$hemo==1,max(yrange),min(yrange))
## ggplot with rug
set.seed(1)
ggplot(agg,aes(predictor,yhat,group=seed))+
## add individual BRTs
geom_jitter(size=1,alpha=0.25,colour="grey",width=0.1)+
## add mean
geom_point(data=pmean,size=2,inherit.aes=F,shape=15,
aes(predictor,yhat))+
## add rug
geom_rug(data=temp,inherit.aes=F,
aes(predictor,yhat),
sides="b",position="jitter",
colour="grey",alpha=0.25,
na.rm=T)+
## theme
theme_bw()+
theme(axis.text=element_text(size=6),
axis.title=element_text(size=7))+
theme(axis.title.x=element_text(margin=margin(t=5,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=5,b=0,l=0)))+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
labs(x=feature,y="marginal effect")+
scale_y_continuous(limits=c(yrange[1]-0.01,yrange[2]+0.01),
labels=scales::number_format(accuracy=0.01))
}
}
## visualize
pdp_plot(brts,vdata$var[1])
pdp_plot(brts,vdata$var[2])
pdp_plot(brts,vdata$var[3])
pdp_plot(brts,vdata$var[4])
pdp_plot(brts,vdata$var[5])
pdp_plot(brts,vdata$var[6])
pdp_plot(brts,vdata$var[7])
pdp_plot(brts,vdata$var[8])
pdp_plot(brts,vdata$var[9])
pdp_plot(brts,vdata$var[10])
pdp_plot(brts,vdata$var[11])
pdp_plot(brts,vdata$var[12])
pdp_plot(brts,vdata$var[13])
pdp_plot(brts,vdata$var[14])
pdp_plot(brts,vdata$var[15])
## average predictions
apreds=lapply(brts,function(x) x$predict)
apreds=do.call(rbind,apreds)
## aggregate
apreds=data.frame(aggregate(pred~tip,data=apreds,mean))
## get basic info
dat=brts[[1]]$predict[c("tip","sampled","hemo")]
## merge
apreds=merge(apreds,dat,by="tip")
View(apreds)
50*17
48*17
280*17
