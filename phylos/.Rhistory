theme_bw()+
labs(x="")+
geom_hline(yintercept=0,linetype=2)
## slope and time
ggplot(sdata,aes(yrs,slopes))+
#geom_point()+
geom_smooth(method="lm")+
geom_text(aes(label=names),size=3)
## repeat but linear
csc$log_cites=log1p(csc$cites)
## fix
ggplot(csc, aes(career_year, log_cites, group=name, color=name))+
#geom_line()+
## smooth
geom_smooth(method="glm",se=F,
method.args=list(family="gaussian"),
linetype=1)+
geom_point()+
theme_bw()+
theme(legend.position="right")
## get slopes
slopes=sapply(levels(csc$name),function(x){
mod=lm(log_cites~career_year,data=csc[which(csc$name==x),])
coef(mod)["career_year"]
})
## get lower
lower=sapply(levels(csc$name),function(x){
mod=lm(log_cites~career_year,data=csc[which(csc$name==x),])
confint(mod)["career_year",][1]
})
## get upper
upper=sapply(levels(csc$name),function(x){
mod=lm(log_cites~career_year,data=csc[which(csc$name==x),])
confint(mod)["career_year",][2]
})
## combine
slopes=data.frame(slopes,lower,upper)
rm(lower,upper)
slopes$names=levels(csc$name)
slopes$yrs=tapply(csc$career_year,csc$name,max)
## fix data name
sdata=slopes
rm(slopes)
## plot
ggplot(sdata,aes(reorder(names,slopes),slopes))+
geom_point()+
geom_errorbar(aes(x=names,ymin=lower,ymax=upper))+
coord_flip()+
theme_bw()+
labs(x="")+
geom_hline(yintercept=0,linetype=2)
## as a function of time
ggplot(sdata,aes(yrs,slopes))+
#geom_point()+
geom_smooth(method="lm")+
geom_text(aes(label=names),size=3)
## repeat with power law
csc$log_yr=log1p(csc$career_year)
ggplot(csc, aes(log_yr, log_cites, group=name, color=name))+
#geom_line()+
## smooth
geom_smooth(method="glm",se=F,
method.args=list(family="gaussian"),
linetype=1)+
geom_point()+
theme_bw()+
theme(legend.position="right")
## get slopes
slopes=sapply(levels(csc$name),function(x){
mod=lm(log_cites~log_yr,data=csc[which(csc$name==x),])
coef(mod)["log_yr"]
})
## get lower
lower=sapply(levels(csc$name),function(x){
mod=lm(log_cites~log_yr,data=csc[which(csc$name==x),])
confint(mod)["log_yr",][1]
})
## get upper
upper=sapply(levels(csc$name),function(x){
mod=lm(log_cites~log_yr,data=csc[which(csc$name==x),])
confint(mod)["log_yr",][2]
})
## combine
slopes=data.frame(slopes,lower,upper)
rm(lower,upper)
slopes$names=levels(csc$name)
slopes$yrs=tapply(csc$career_year,csc$name,max)
## fix data name
sdata2=slopes
rm(slopes)
## plot
sdata2$one=ifelse(sdata2$slopes>=1,">1",ifelse(sdata2$slopes<=1 & sdata2$slopes>0,"<1","<0"))
ggplot(sdata2,aes(reorder(names,slopes),slopes))+
geom_point(aes(colour=one))+
geom_errorbar(aes(x=names,ymin=lower,ymax=upper,colour=one))+
coord_flip()+
geom_hline(yintercept=0,linetype=2)+
geom_hline(yintercept=1,linetype=2)+
theme_bw()+
labs(x="")+
guides(colour=F)+
scale_colour_viridis_d(end=0.5)
## get coauthor network
coauthor_network <- scholar::get_coauthors(id,n_coauthors=17,n_deep=1)
## trim to me only
coauthor_network=coauthor_network[which(coauthor_network$author=="Daniel J. Becker"),]
150*30
150*30*2
12*4
15*20*4
10*20*4
12*20*4
13*20*4
254686+72000+32500+197552
330278+156500+54500+297428
306216+32000+27500+201143
330278+85500+54500+258653
556738+838706+566859+728931
## google scholar through R
library(scholar)
id="BWaMDkAAAAJ"
## get profile
prof=get_profile(id)
id="_BWaMDkAAAAJ"
## get profile
prof=get_profile(id)
prof
## get publications
pubs=get_publications(id)
View(pubs)
id="LaY9M9gAAAAJ"
## get profile
prof=get_profile(id)
## get publications
pubs=get_publications(id)
View(pubs)
id="c8IAI24AAAAJ"
## get publications
pubs=get_publications(id)
## ready workspace
rm(list=ls())
graphics.off()
## google scholar through R
library(scholar)
## set id
id="Lj5-yuoAAAAJ&hl"
## get profile
prof=get_profile(id)
## ready workspace
rm(list=ls())
graphics.off()
## google scholar through R
library(scholar)
## set id
id="Lj5-yuoAAAAJ&hl"
## get profile
prof=get_profile(id)
## get publications
pubs=get_publications(id)
## mean
mean(pubs$cites)
View(pubs)
## ready workspace
rm(list=ls())
graphics.off()
## google scholar through R
library(scholar)
## set id
id="Lj5-yuoAAAAJ&hl"
## get profile
prof=get_profile(id)
## get publications
pubs=get_publications(id)
View(pubs)
## mean
mean(pubs$cites)
## poisson
library(ggplot2)
ggplot(pubs[-which(pubs$year<2011),],aes(year,cites))+
geom_jitter(width=0.1)+
stat_smooth(method = "gam", formula = y ~ s(x, k = 5), size = 1,method.args = list(family = "poisson"))
## pubs per year
pubs$pub=1
pag=aggregate(pub~year,data=pubs,sum)
ggplot(pag,aes(year,pub))+
geom_segment(aes(xend=year,yend=0))+
geom_point(size=2)+
scale_x_continuous(breaks=min(pag$year):max(pag$year))
## model
library(MASS)
mod=glm(pub~year,data=pag,family=poisson)
predict(mod,type="response",newdata=data.frame(year=2021))
mod=glm.nb(pub~year,data=pag)
predict(mod,type="response",newdata=data.frame(year=2021))
library(mgcv)
library(visreg)
mod=gam(pub~s(year,k=5),data=pag,family=poisson)
predict(mod,type="response",newdata=data.frame(year=2021))
visreg(mod,scale="response")
## get citation history
cites=get_citation_history(id)
## plot
library(ggplot2)
ggplot(cites, aes(year, cites)) + geom_line() + geom_point()
## gam
library(mgcv)
library(visreg)
library(MuMIn)
mod1=gam(cites~s(year,k=7),data=cites,family=poisson)
mod2=glm(cites~year,data=cites,family=poisson)
AICc(mod1,mod2)
## visualize
visreg(mod1,scale='response')
predict(mod1,type="response",newdata=data.frame(year=2021))
## predict
visreg(mod1,scale='response',xlim=c(min(cites$year),2020)); points(cites~year,data=cites)
visreg(mod2,scale='response',xlim=c(min(cites$year),2020)); points(cites~year,data=cites)
predict(mod1,newdata=data.frame(year=2020),type='response')
cites[cites$year==2020,'cites']
## data to 2019
set=cites[-which(cites$year==2020),]
## fit to 2019 only
mod1=gam(cites~s(year,k=5),data=set,family=poisson)
mod2=glm(cites~year,data=set,family=poisson)
## visualize
visreg(mod1,scale='response')
visreg(mod2,scale='response')
## predict
visreg(mod1,scale='response',xlim=c(min(cites$year),2020)); points(cites~year,data=cites)
visreg(mod2,scale='response',xlim=c(min(cites$year),2020)); points(cites~year,data=cites)
## get multiple ids
ids=c("Lj5-yuoAAAAJ&hl","LGGhe8EAAAAJ&hl","zVLjRqEAAAAJ&hl","UsR-OgwAAAAJ&hl",
"baoGwQ0AAAAJ&hl","39rdP4QAAAAJ&hl","mQ_fhckAAAAJ&hl","R_f0bXUAAAAJ&hl",
"2ZwUC84AAAAJ&hl","4h59toMAAAAJ&hl","l5gB3EAAAAAJ&hl")
## compare
cs=compare_scholars(ids)
500*4
500000*4
23666+2816+12612
3*50*2*4
1200*2
(2400*3)+(2400*3)+(1000*5)
19400/2
20*4
80*150
80*150*3
(20*4)*150*3
(10*4)*150*3
422/50
500*(9+4+5)
200*(9+4+5)
36000+18000
34000/2
15*20*40
7*12
2000*(1+1+1+1+1+1+1+1)
N <- 100
C <- rbinom(N, 1, 0.2)
H <- rnorm(N, -10, 2)
A <- 1.4*C+0.6+H
B <- 1.5*C^2+0.8/H
df <- data.frame(A = A, B = B, C = factor(C), H = H)
View(df)
library('mgcv')
m <- gam(list(A ~ C + s(H),
B ~ C + s(H)),
data = df, family = mvn(d = 2))
m
df$H
?gam
m <- gam(list(A ~ C + s(H),
B ~ C + s(H)),
data = df, family = mvn(d = 2))
N <- 100
C <- rbinom(N, 1, 0.2)
H <- rnorm(N, -10, 2)
A <- 1.4*C+0.6+H
B <- 1.5*C^2+0.8/H
df <- data.frame(A = A, B = B, C = factor(C), H = H)
library('mgcv')
m <- gam(list(A ~ C + s(H),
B ~ C + s(H)),
data = df, family = mvn(d = 2))
120*3*20
250/(4*1000)
(4*1000)/250
241*16
(241*16)/2
(241*((4*1000)/250))/2
((241*((4*1000)/250))/2)+((20*3*120)/2)
4+7+4+7
1/12
(1/12)*80000
(1/)*80000
(1/9)*80000
1/9
80000/8889
8889/80000
80000/9
(80000/9)*1*1
80000/0.11
80000*0.11
80000*0.111
80000*0.1111
80000*0.1112
52*20
(52*20)*15
(52*20)*12
(52*15)*12
(52*15)*12.5
(52*15)*13
(50*15)*13
(52*15)*12.5
9750*3
52*15*12.5
52*40*12.5
9750/26000
8889+45000+35000+20000
(8889+45000+35000+20000)
34488/(8889+45000+35000+20000)
35592/112156
36659/115520
37758/118986
52560/219
(52560/219)/3
3+3+5
51500/11
1500*11
(1500*3)*11
(1000*3)*11
(500*3)*11
2000*3*4
184000+342000+42000+99000
184000+34000+42000+99000
62065+49652
112+10
8*200
library(escalc)
library(metafor)
?escalc
11*500
375/100
3.75*1500
(3.75*1500)+6000+800
(0.55*25000)*(1+1+1+1)
3222905+55000
0.11*80000
?sintegral
??sintegral
## clean environment & plots
rm(list=ls())
graphics.off()
## libraries
library(plyr)
library(ggplot2)
library(metafor)
library(ape)
library(caper)
library(viridis)
library(stringr)
library(reshape2)
## load data manual
setwd("~/Desktop/batgap/data")
data=read.csv("Prevalence-Grid view.csv")
## ## load in Upham phylogeny
setwd("~/Desktop/BeckerLabOU/phylos")
tree=read.nexus('MamPhy_fullPosterior_BDvr_Completed_5911sp_topoCons_NDexp_MCC_v2_target.tre')
## load in taxonomy
taxa=read.csv('taxonomy_mamPhy_5911species.csv',header=T)
taxa=taxa[taxa$ord=="CHIROPTERA",]
taxa$tip=taxa$Species_Name
## trim phylo to bats
tree=keep.tip(tree,taxa$tiplabel)
## fix tip
tree$tip.label=sapply(strsplit(tree$tip.label,'_'),function(x) paste(x[1],x[2],sep=' '))
taxa$species=sapply(strsplit(taxa$tip,'_'),function(x) paste(x[1],x[2],sep=' '))
## are all bats in tree
setdiff(data$bat_species,tree$tip)
## multiple species?
data$spec=sapply(strsplit(data$bat_species,","),function(x) length(x))
## fix others
data$species=data$bat_species
data$species=revalue(data$species,
c("Pipistrellus javanicas"="Pipistrellus javanicus",
"Scotphilus kuhlii"="Scotophilus kuhlii",
"Rousettus leschenaulti"="Rousettus leschenaultii",
"Myotis ricketti"="Myotis pilosus",
"Miniopterus schreibersi"="Miniopterus schreibersii",
"Rhinolophus pearsoni"="Rhinolophus pearsonii",
"Neoromicia cf. zuluensis"="Neoromicia zuluensis",
"Pteropus medius"="Pteropus giganteus",
"Rousettous aegyptiacus"="Rousettus aegyptiacus",
"Taphozous perforates"="Taphozous perforatus",
"Hipposideros caffer ruber"="Hipposideros ruber",
"Macronycteris commersoni"="Hipposideros commersoni",
"Momopterus acetabulosus"="Mormopterus acetabulosus",
"Pteropus seychellensis seychellensis"="Pteropus seychellensis",
"myotis bechsteinii"="Myotis bechsteinii",
"Pipistrellus nanus"="Neoromicia nana",
"Miniopterus africanus"="Miniopterus inflatus",
"Mesophylla macconnellii"="Mesophylla macconnelli",
"Myotis formosus chofukusei"="Myotis formosus",
"Pipistrelus abramus"="Pipistrellus abramus",
"Myotis capaccini"="Myotis capaccinii",
"Myotis oxygnatus"="Myotis blythii",
"Epomps buettikoferi"="Epomops buettikoferi",
"Austronomus australis"="Tadarida australis",
"Nyctophilus major"="Nyctophilus timoriensis",
"Nyctiphilus geoffroyi"="Nyctophilus geoffroyi",
"Miniopterus orianae oceanensis"="Miniopterus orianae",
"Miniopterus orianae bassanii"="Miniopterus orianae",
"Haplonicteris fischeri"="Haplonycteris fischeri",
"Dobsonia mollucensis"="Dobsonia moluccensis",
"Molossus major"="Molossus molossus",
"Rhinolophus affinus"="Rhinolophus affinis",
"Megaerops kusnotei"="Megaerops kusnotoi",
"Lissonycteris angolensis"="Myonycteris angolensis",
"Nycteris cf. gambiensis"="Nycteris gambiensis",
"Hipposideros cf. ruber"="Hipposideros ruber",
"Hipposideros cf. gigas"="Hipposideros gigas",
"Pipistrellus minus"="Pipistrellus tenuis",
"Rhinolophus borneenis"="Rhinolophus borneensis",
"Miniopterus meghrebensis"="Miniopterus maghrebensis",
"Rhinoloplus malayanus"="Rhinolophus malayanus",
"Craseonycteris thonlongyal"="Craseonycteris thonglongyai",
"Coelops frithi"="Coelops frithii",
"Rhinolophus malyanus"="Rhinolophus malayanus",
"Peking Myotis,Myotis pequinius"="Myotis pequinius",
"Miniopterus filiginosus"="Miniopterus fuliginosus",
"Hypsugo pulveratus"="Pipistrellus pulveratus",
"Tyloncyteris pachypus"="Tylonycteris pachypus",
"Rousettus lechenaulti"="Rousettus leschenaultii",
"Rhinolophus affiinus"="Rhinolophus affinis",
"Vespertilio superans"="Vespertilio sinensis",
"Rhinolophus rouxi"="Rhinolophus rouxii",
"Myotis formosus flavus"="Myotis formosus",
"Pipistrellus taiwanesis"="Pipistrellus taiwanensis",
"Myotis fimbriatus taiwanensis"="Myotis fimbriatus",
"Barbastella darjelingesis"="Barbastella beijingensis",
"Hipposideros armiger terasensis"="Hipposideros armiger",
"Coelops frithii formosanus"="Coelops frithii",
"Rhinolophus darlingi damarensis"="Rhinolophus darlingi",
"Nycticeinops schlieffenii"="Nycticeinops schlieffeni",
"Neuromicia helios"="Neoromicia helios",
"Neuromicia nana"="Neoromicia nana",
"Scotorepens rueppellii"="Scoteanax rueppellii",
"Hipposideros terasensis"="Hipposideros armiger",
"Stenonycteris lanosus"="Rousettus lanosus",
"Myonicteris angolensis"="Myonycteris angolensis",
"Mormoops megalohyla"="Mormoops megalophylla",
"Artibeus watsoni"="Dermanura watsoni",
"Artibeus phaeotis"="Dermanura phaeotis",
"Nycteris argae"="Nycteris arge",
"Lyssonycteris angolensis"="Myonycteris angolensis",
"Pipistrellus capensis"="Neoromicia capensis",
"Myotis bocagei"="Myotis bocagii",
"Chaerephon pumila"="Chaerephon pumilus",
"Hypsugo savii"="Pipistrellus savii",
"Myotis mistacinus"="Myotis mystacinus",
"Myotis oxygnathus"="Myotis blythii",
"Rhinolophus shamelli"="Rhinolophus shameli",
"Rhinolophus blythi"="Rhinolophus lepidus",
"Rhinolophus monoceros"="Rhinolophus pusillus",
"Rhinolophus lobatus"="landeri",
"Rhinolophus rhodesiae"="Rhinolophus simulator",
"Pteropus seychellensis comorensis"="Pteropus seychellensis",
"Chaerephon pusillus"="Chaerephon pumilus",
"Taphosius mauritianus"="Taphozous mauritianus",
"Chaerephon leucogaster"="Chaerephon pumilus",
"Myotis cillolabrum"="Myotis ciliolabrum",
"Vampyressa pussilla"="Vampyressa pusilla",
"Artibeus literatus"="Artibeus lituratus",
"Miniopterus orianae"="Miniopterus oceanensis",
"Vampyriscus nymphaea"="Vampyressa nymphaea",
"Glossophaga comissarisi"="Glossophaga commissarisi",
"Eptesicus furnalis"="Eptesicus furinalis"))
## check
setdiff(data$species,tree$tip)
length(setdiff(data$species,tree$tip))
length(unique(data$species))
## trim dataset to only phylogeny
set=data[data$species%in%tree$tip.label,]
set$species=factor(set$species)
set$studies=factor(set$Field.25)
## aggregate to sampled bats
library(tidyr)
sdata=set %>%
#filter(!(studies == "highly diversified coronaviruses in neotropical bats")) %>%
dplyr::select(studies, species, country, state, site, longitude, latitude, sample_year, start_year, sample) %>%
distinct() %>%
group_by(species) %>%
dplyr::summarize(tested = sum(sample),
nstudies = n_distinct(studies))
??distinct
?distinct
## aggregate to sampled bats
library(tidyr)
sdata=set %>%
#filter(!(studies == "highly diversified coronaviruses in neotropical bats")) %>%
dplyr::select(studies, species, country, state, site, longitude, latitude, sample_year, start_year, sample) %>%
dplyr::distinct() %>%
group_by(species) %>%
dplyr::summarize(tested = sum(sample),
nstudies = n_distinct(studies))
sdata=set %>%
#filter(!(studies == "highly diversified coronaviruses in neotropical bats")) %>%
dplyr::select(studies, species, country, state, site, longitude, latitude, sample_year, start_year, sample) %>%
dplyr::distinct() %>%
dplyr::group_by(species) %>%
dplyr::summarize(tested = sum(sample),
nstudies = n_distinct(studies))
set$studies
